/** 
@addtogroup qi-architecture
@details
<div>
  <!-- Architecture Main topic -->
  These sections define the different views of the Qi Stack architecture.
  <h2 class="qiMain"> Qi Stack Architecture - Integration View </h2>
  Integration view describes the features essential for integrating the Qi Stack in the end application.
  This is in contrast to the developers, who need understanding of the internal details of the Qi Stack implementation.
  <br>
  The integrator (user) of Qi Stack should know the following features:
  - APIs exposed by the Qi Stack
  - dependencies required for integrating the Qi Stack
  - static configuration parameters of the Qi Stack

  The integrators (users) are not required to understand all the internal details of the Qi Stack 
  but more system level type implementation details. This firmware documentation section covers critcial components 
  of the Qi Stack to make use of in the end applications. 

  <div>
    <!-- Architecture diagram -->
    <br>
      Following block diagram shows the main components of the Qi Stack which are essential for 
      integrating or using the Qi Stack in a project.
    <br>
    <p>
      <center>
        <img src="images/QiStackArch_integrators_view.png" alt="" width="800"/>
      </center>
    </p>
    <p><center><i> Qi Stack Architecture - Integration View  </i></center></p>
  </div>

  <div style="font-size:12px">
      <!-- Architecture diagram links to other sections -->
      <i><u> References </u></i><br>
      <i>
      Different sections within this documentation provide all relevant information on these modules. 
      Please refer @ref qi-configuration "Qi Static Configuration", @ref qi-external "Qi External Dependencies".

      The @ref qi-architecture "Qi APIs" are described in following sub sections of the architecture documentation. 
      Please refer @ref qi-core-init "Initialization", @ref qi-core-tasks "Tasks", @ref qi-statemachine "State Machine", @ref qi-dataStream "Data Streams".

      The @ref qi-architecture "Qi Stack Internal Implementation" are also covered in the different sub sections of the architecture documentation.
      </i>
  </div>

  <div>
      <hr>
      <!-- Architecture diagram description -->
      <h3 class="qiSub1"> Overview </h3>
      The Qi Stack provides complete implementation satisfying all the requirements of Qi Specifications. 
      To use the Qi Stack, a lot of configurations and some basic implementations are necessary at the users end.
      
      Following are the important activities involved in integrating the Qi Stack:
      - perform static configurations (build/compile time configuration activity)
      - provide the implementation of external dependencies (build/compile time configuration activity)
      - invoke the initialization function after reset (impacts code execution)
      - invoke the state machine in regular intervals (impacts code execution)

      The states of the Qi Stack are managed entirely without much interventions from the application which uses it. 

      <br> The following sections provide the details on how to use the Qi Stack:

      <h3 class="qiSub1">Qi APIs</h3>
      Qi APIs provide the point of entry in invoking the Qi Stack features. The APIs can be grouped as follows:
          <h4 class="qiSub2">Initialization</h4>
          These are the APIs responsible for initializing the Qi Stack states, global variables etc. These should be called before invoking any other API of the 
          Qi Stack. It is recommended to invoke these functions at the system startup.

          <h4 class="qiSub2">Tasks</h4>
          These APIs should be invoked at the regular intervals. The co-operative scheduler can be used to invoke these APIs.

          <h4 class="qiSub2">State Machine</h4>
          The state machine implements the Qi specifications. The states map almost exactly with the specifications and even the functionality achieved in each 
          state and state transitions are implemented as specified in Qi Specifications. The state machine takes care of managing the timeout errors and also handles the 
          packets received in different states.

          <h4 class="qiSub2">Data Streams</h4>
          Data Streams are special APIs defined to implement the data transport layer requirements as defined in Qi 1.3 specifications. These data streams support 
          the implementation of the Qi Authentication feature. The Qi Stack does not contain the actual implementation of Qi Authentication, but it contains
          all the necessary APIs required to achieve the functionality.
          <br>
          The Qi Authentication is implemented as a separate library which needs to be integrated with the Qi Stack.
          <br>
          <br>

          <div style="font-size:12px">
          <i><b>API Code Examples:</b></i>
          <br> Following is a possible order of initialization of the functions:
          @verbatim
            //Drivers initialization
            Dev_Term_Init();
            Drv_LED_Init();
            Drv_ADC_Init();
            Drv_VRail_Init();

            ...
            //Modules initialization
            Qi_Main_Init();

            ...
            //Authentication initialization
            CryptoAuth_Initialize();
            QI_AUTHP_Init();

            ...
            //Start the state machine
            Qi_Main_Statemachine_Start();
          @endverbatim

          <br> Following snippet shows an example of the task related function calls:
          @verbatim
            // Realtime task - 1ms
            Qi_Tasks_1ms();

            ...
            // Soft realtime task - 10ms
            Drv_ADC_Sample_Task_10ms();

            ...
            // Backend task
            Qi_Main_Task(); // Qi Main task
            ...
            QI_AUTHP_Task(); // Qi Authentication task
          @endverbatim
          </div>

      <h3 class="qiSub1">Qi External Dependencies</h3>
      The external dependencies are essential functions which are required to compile and execute the Qi Stack in a given application.
      The Qi Stack expects these implementations to be supplied by the application. All these dependencies are collected
      in a single folder `qi/extern/` so that it is easy to make changes in the Qi Stack during integration.
          <h4 class="qiSub2">Power Control</h4>
          A power controller (e,g : Four Switch Buck-Boost Controller) may be integrated with the Qi Stack via this well defined external dependency. The 
          prototypes of functions which need to be implemented by power controller are defined in the section @ref qi-external "Qi External Dependencies".

          <h4 class="qiSub2">Scheduler</h4>
          The Qi Stack depends on the scheduler for:
          - watchdog timer management
          - achieving time delay for certain milli seconds

          The scheduler should provide these features via well defined APIs.

          <h4 class="qiSub2">Project Configuration</h4>
          The application specific configurations related to Qi Stack should be properly defined through the well known project setting include files. This is 
          required to enable / disable some features of Qi Stack.

          <h4 class="qiSub2">Utilities</h4>
          Qi Stack requires the utility functions related to memory copy, memory clear, etc. The functions used in the application for memory handling should be 
          mapped to Qi Stack external dependencies.

      <h3 class="qiSub1">Qi Static Configuration</h3>
      The Qi Stack is designed to be highly configurable so that it can be used in different applications. 
      It exposes all the configurable items through C language macros (the #defines). There are a large number of 
      parameters which need configuration before it is compiled in a project. 
          <h4 class="qiSub2">Communication</h4>
          Contains configurable macros related to demodulation such as: filter coefficients, DDM I/O ports/driver, number of channels, timing thresholds, etc..

          <h4 class="qiSub2">Qi Parameters</h4>
          All the Qi Specification related configurations and the charger topology related settings are defined as macros in a template header file. The 
          application should create a copy of this template file and set the configurations appropriately.

          <h4 class="qiSub2">Peripherals</h4>
          Similar to Qi Parameters, the peripheral configuration is provided as a template file. The application should copy these template data and set the 
          peripherals as per topology and hardware configuration.

          <h4 class="qiSub2">Data Streams</h4>
          The Qi Authentication related settings should be configured in the data streams configuration file when Qi 1.3 specification is supported. The Qi 
          Authentication application and data streams features of the Qi Stack should be enabled to use such features.

      <h3 class="qiSub1">Qi Stack Internal Implementation</h3>
      The Qi Stack Internals describe the implementation details. This includes the implementation as per requirements of Qi Specifications. The internals also 
      describe the interaction between the different sub modules. Some of these sub modules expose the APIs which are used for interacting with the Qi Stack.
      <br>
      For detailed description, see <a href="#qi-stack-arch-internals">Qi Stack Architecture - Development View</a>.
  </div>

  <div>
    <hr>
    <!-- Architecture Internals -->
    <h2 class="qiMain"> <a name="qi-stack-arch-internals">Qi Stack Architecture - Development View </a> </h3>
      The following sections describe the Qi Stack Development View or the view describing the implementation details. 
      The developers of Qi Stack require an understanding of internals, which constitites,
        - understanding the data structures
        - understanding the functions/ APIs implemented in different modules 
      
      In this section the different components of the Qi Stack are described and links to the sections which cover 
      the implementation details are provided.
  </div>

  <div>
  <!-- Architecture diagram -->
    <br>
      Following block diagram shows the main components of the Qi Stack Internals.
    <br>
    <p>
      <center>
        <img src="images/QiStackArch_internals.png" alt="" width="1000"/>
      </center>
    </p>
    <p><center><i> Qi Stack Architecture - Internals  </i></center></p>
  </div>

  <div>
      The Qi Stack Internals are again grouped into different sub groups based on the type of functionality they implement.
      The following links provide the detailed description of these sub groups and modules they contain.

      - @ref qi-core "Core Functions"
      - @ref qi-statemachine "State Machine"
      - @ref qi-dataStream "Transport Layer"
      - @ref qi-comms "Communication"
      - @ref qi-driver "Device Drivers and Peripheral Drivers"
      - Other Modules : @ref qi-timers "Timer", @ref qi-calibration "Calibration"
  </div>

</div>

*/